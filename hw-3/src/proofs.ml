open Tree;;
open Buffer;;

module HT = Hashtbl;;

let (>>) x f = f x;;
let tree_of_string s = s >> Lexing.from_string >> Parser.main Lexer.main;;
let string_of_tree tree =
  let s_op op = match op with Conj -> "&" | Disj -> "|" | Impl -> "->" in

  let buf = create 1000 in
  let rec s_t t = match t with
    | Var v ->  add_string buf v
    | Neg t -> add_char buf '('; add_char buf '!'; s_t t; add_char buf ')';
    | Binop (op,l,r) -> add_char buf '('; (s_t l); add_string buf (s_op op); (s_t r); add_char buf ')'
  in s_t tree;
  contents buf
;;

let remove_blanks = Str.global_replace (Str.regexp " \\|	") "";;
let split stringValue separatorValue = Str.split (Str.regexp separatorValue) stringValue;;

let replace stringValue whatToFind replaceToWhat = Str.global_replace (Str.regexp whatToFind) replaceToWhat stringValue;;
let replaceABinS a b s = (replace (replace s "*" a) "#" b);;

let match_with_axiom tree =
  match tree with
  | Binop (Impl, alpha, Binop (Impl, beta, alpha')) when (alpha = alpha') -> 1
	| Binop (Impl, Binop (Impl, alpha, beta), Binop (Impl, Binop (Impl, alpha', Binop (Impl, beta', ceta)), Binop (Impl, alpha'', ceta'))) when (alpha = alpha' && alpha' = alpha'' && beta = beta' && ceta = ceta') -> 2
	| Binop (Impl, alpha, Binop (Impl, beta, Binop (Conj, alpha', beta'))) when (alpha = alpha' && beta = beta') -> 3
	| Binop (Impl, Binop (Conj, alpha, beta), alpha') when (alpha = alpha') -> 4
	| Binop (Impl, Binop (Conj, alpha, beta), beta') when (beta = beta') -> 5
	| Binop (Impl, alpha, Binop (Disj, alpha', beta)) when (alpha = alpha') -> 6
	| Binop (Impl, beta, Binop (Disj, alpha, beta')) when (beta = beta') -> 7
	| Binop (Impl, Binop (Impl, alpha, ceta), Binop (Impl, Binop (Impl, beta, ceta'), Binop (Impl, Binop (Disj, alpha', beta'), ceta''))) when (alpha = alpha' && beta = beta' && ceta = ceta' && ceta' = ceta'') -> 8
	| Binop (Impl, Binop (Impl, alpha, beta), Binop (Impl, Binop(Impl, alpha', Neg (beta')), Neg (alpha''))) when (alpha = alpha' && alpha' = alpha'' && beta = beta') -> 9
	| Binop (Impl, Neg (Neg (alpha)), alpha') when (alpha = alpha') -> 10
	| _ -> -1;;

let firstDeductionLemm alphaString = replace "(*->(*->*))\n((*->(*->*))->((*->((*->*)->*))->(*->*)))\n((*->((*->*)->*))->(*->*))\n(*->((*->*)->*))\n(*->*)" "*" alphaString;;
let secondDeductionLemm alphaString b c = replace (replace (replace "((*->#)->((*->(#->~))->(*->~)))\n((*->(#->~))->(*->~))" "*" alphaString) "#" b) "~" c;;

(* guessesList = Г, alpha = альфа, beta = бета делает из Г,альфа|-бета Г,альфа->бета *)
let applyHardDeduction guessesList alpha beta proofLines = begin

  let rec print_string_list listItems =
    match listItems with
    | [] -> ()
    | firstElement::otherElements -> print_endline firstElement; print_string_list otherElements in

  let map_tree_to_first_index = (HT.create 4096: (string, int) HT.t) in
  let modus_ponens_helper_map = (HT.create 4096: (string, string) HT.t) in
  let map_guesses_to_true = (HT.create 4096: (string, int) HT.t) in
  let alphaString = (string_of_tree alpha) in

  let rec fill_guesses_map listItems =
    match listItems with
    | [] -> ()
    | firstElement::otherElements -> begin
      fill_guesses_map otherElements;
      HT.replace map_guesses_to_true (string_of_tree (tree_of_string firstElement)) 1
    end in

  let rec fill_index_map index listItems =
    match listItems with
    | [] -> ()
    | firstElement::otherElements -> begin
      let v = (string_of_tree (tree_of_string firstElement)) in
      if HT.mem map_tree_to_first_index v = false then HT.add map_tree_to_first_index v index;
      fill_index_map (index + 1) otherElements;
    end in

  let rec append_list_to_front listToAppend lst =
    match listToAppend with
    | [] -> lst
    | firstElement::otherElements -> firstElement::(append_list_to_front otherElements lst) in

  let update_connections index tree =
    match tree with
    | Binop(Impl, left, right) -> begin
      let leftString  = (string_of_tree left) in
      let rightString = (string_of_tree right) in
      if not (HT.mem modus_ponens_helper_map rightString) then begin
        let leftStringIndex  = try HT.find map_tree_to_first_index leftString  with _ -> -1 in
        let rightStringIndex = try HT.find map_tree_to_first_index rightString with _ -> -1 in
        if (leftStringIndex > 0 && rightStringIndex > 0 && leftStringIndex < rightStringIndex) then HT.add modus_ponens_helper_map rightString leftString
      end
    end
    | _ -> () in

  let get_impl s = "(" ^ alphaString ^ "->" ^ s ^ ")" in
  let is_axiom_or_guess s t =
    if match_with_axiom t > 0 then true
    else if (try HT.find map_guesses_to_true s with _ -> -1) > 0 then true
    else false in

  let get_new_proof s t =
    let implString = get_impl s in
    if is_axiom_or_guess s t then [s; "(" ^ s ^ "->" ^ implString ^ ")"; implString]
    else if s = alphaString then append_list_to_front (split (firstDeductionLemm alphaString) "\n") [implString]
    else begin
      let modus_ponens_pair = HT.find modus_ponens_helper_map s in
      append_list_to_front (split (secondDeductionLemm alphaString modus_ponens_pair s) "\n") [implString]
    end in

  let rec generate_new_proof index listItems =
    match listItems with
    | [] -> []
    | firstElement::otherElements -> begin
      let treeRepresentation = (tree_of_string firstElement) in
      let stringRepresentation = (string_of_tree treeRepresentation) in
      let newProofForCurrentItem = get_new_proof stringRepresentation treeRepresentation in
      update_connections index treeRepresentation;
      let restOfTheProof = generate_new_proof (index + 1) otherElements in
      append_list_to_front newProofForCurrentItem restOfTheProof
    end in

    fill_guesses_map guessesList;
    fill_index_map 1 proofLines;
    generate_new_proof 1 proofLines
end;;

let notA_notB_notOr = "(!*)
(!#)
(((!*)->((!#)->(!*)))->(*->((!*)->((!#)->(!*)))))
((!*)->((!#)->(!*)))
(*->((!*)->((!#)->(!*))))
((!*)->(*->(!*)))
(!*)
(*->(!*))
((*->(!*))->((*->((!*)->((!#)->(!*))))->(*->((!#)->(!*)))))
((*->((!*)->((!#)->(!*))))->(*->((!#)->(!*))))
(*->((!#)->(!*)))
((*->((!#)->*))->(*->(*->((!#)->*))))
(*->((!#)->*))
(*->(*->((!#)->*)))
(*->((*->*)->*))
(*->(*->*))
((*->(*->*))->((*->((*->*)->*))->(*->*)))
((*->((*->*)->*))->(*->*))
(*->*)
((*->*)->((*->(*->((!#)->*)))->(*->((!#)->*))))
((*->(*->((!#)->*)))->(*->((!#)->*)))
(*->((!#)->*))
((((!#)->*)->(((!#)->(!*))->(!(!#))))->(*->(((!#)->*)->(((!#)->(!*))->(!(!#))))))
(((!#)->*)->(((!#)->(!*))->(!(!#))))
(*->(((!#)->*)->(((!#)->(!*))->(!(!#)))))
((*->((!#)->*))->((*->(((!#)->*)->(((!#)->(!*))->(!(!#)))))->(*->(((!#)->(!*))->(!(!#))))))
((*->(((!#)->*)->(((!#)->(!*))->(!(!#)))))->(*->(((!#)->(!*))->(!(!#)))))
(*->(((!#)->(!*))->(!(!#))))
((*->((!#)->(!*)))->((*->(((!#)->(!*))->(!(!#))))->(*->(!(!#)))))
((*->(((!#)->(!*))->(!(!#))))->(*->(!(!#))))
(*->(!(!#)))
(((!(!#))->#)->(*->((!(!#))->#)))
((!(!#))->#)
(*->((!(!#))->#))
((*->(!(!#)))->((*->((!(!#))->#))->(*->#)))
((*->((!(!#))->#))->(*->#))
(*->#)
(#->((#->#)->#))
(#->(#->#))
((#->(#->#))->((#->((#->#)->#))->(#->#)))
((#->((#->#)->#))->(#->#))
(#->#)
((*->#)->((#->#)->((*|#)->#)))
((#->#)->((*|#)->#))
((*|#)->#)
((!#)->((*|#)->(!#)))
(!#)
((*|#)->(!#))
(((*|#)->#)->(((*|#)->(!#))->(!(*|#))))
(((*|#)->(!#))->(!(*|#)))
(!(*|#))";;

let notA_notB_notAnd = "(!*)
(!#)
(*&#)->*
(!*)->((*&#)->(!*))
(*&#)->(!*)
((*&#)->*)->((*&#)->(!*))->(!(*&#))
((*&#)->(!*))->(!(*&#))
(!(*&#))";;

let notA_B_notAnd = "(!*)
#
(*&#)->*
(!*)->((*&#)->(!*))
(*&#)->(!*)
((*&#)->*)->((*&#)->(!*))->(!(*&#))
((*&#)->(!*))->(!(*&#))
(!(*&#))";;

let a_notB_notAnd = "*
(!#)
(*&#)->#
(!#)->(*&#)->(!#)
((*&#)->(!#))
((*&#)->#)->((*&#)->(!#))->(!(*&#))
((*&#)->(!#))->(!(*&#))
(!(*&#))";;

let a_notB_notImpl = "*
(!#)
((*->#)->(((*->#)->(*->#))->(*->#)))
((*->#)->((*->#)->(*->#)))
(((*->#)->((*->#)->(*->#)))->(((*->#)->(((*->#)->(*->#))->(*->#)))->((*->#)->(*->#))))
(((*->#)->(((*->#)->(*->#))->(*->#)))->((*->#)->(*->#)))
((*->#)->(*->#))
(*->((*->#)->*))
*
((*->#)->*)
(((*->#)->*)->(((*->#)->(*->#))->((*->#)->#)))
(((*->#)->(*->#))->((*->#)->#))
((*->#)->#)
((((!#)->((*->#)->(!#)))->((!#)->((!#)->((*->#)->(!#)))))->(((*->#)->#)->(((!#)->((*->#)->(!#)))->((!#)->((!#)->((*->#)->(!#)))))))
(((!#)->((*->#)->(!#)))->((!#)->((!#)->((*->#)->(!#)))))
(((*->#)->#)->(((!#)->((*->#)->(!#)))->((!#)->((!#)->((*->#)->(!#))))))
(((!#)->((*->#)->(!#)))->(((*->#)->#)->((!#)->((*->#)->(!#)))))
((!#)->((*->#)->(!#)))
(((*->#)->#)->((!#)->((*->#)->(!#))))
((((*->#)->#)->((!#)->((*->#)->(!#))))->((((*->#)->#)->(((!#)->((*->#)->(!#)))->((!#)->((!#)->((*->#)->(!#))))))->(((*->#)->#)->((!#)->((!#)->((*->#)->(!#)))))))
((((*->#)->#)->(((!#)->((*->#)->(!#)))->((!#)->((!#)->((*->#)->(!#))))))->(((*->#)->#)->((!#)->((!#)->((*->#)->(!#))))))
(((*->#)->#)->((!#)->((!#)->((*->#)->(!#)))))
(((!#)->(((!#)->(!#))->(!#)))->(((*->#)->#)->((!#)->(((!#)->(!#))->(!#)))))
((!#)->(((!#)->(!#))->(!#)))
(((*->#)->#)->((!#)->(((!#)->(!#))->(!#))))
(((!#)->((!#)->(!#)))->(((*->#)->#)->((!#)->((!#)->(!#)))))
((!#)->((!#)->(!#)))
(((*->#)->#)->((!#)->((!#)->(!#))))
((((!#)->((!#)->(!#)))->(((!#)->(((!#)->(!#))->(!#)))->((!#)->(!#))))->(((*->#)->#)->(((!#)->((!#)->(!#)))->(((!#)->(((!#)->(!#))->(!#)))->((!#)->(!#))))))
(((!#)->((!#)->(!#)))->(((!#)->(((!#)->(!#))->(!#)))->((!#)->(!#))))
(((*->#)->#)->(((!#)->((!#)->(!#)))->(((!#)->(((!#)->(!#))->(!#)))->((!#)->(!#)))))
((((*->#)->#)->((!#)->((!#)->(!#))))->((((*->#)->#)->(((!#)->((!#)->(!#)))->(((!#)->(((!#)->(!#))->(!#)))->((!#)->(!#)))))->(((*->#)->#)->(((!#)->(((!#)->(!#))->(!#)))->((!#)->(!#))))))
((((*->#)->#)->(((!#)->((!#)->(!#)))->(((!#)->(((!#)->(!#))->(!#)))->((!#)->(!#)))))->(((*->#)->#)->(((!#)->(((!#)->(!#))->(!#)))->((!#)->(!#)))))
(((*->#)->#)->(((!#)->(((!#)->(!#))->(!#)))->((!#)->(!#))))
((((*->#)->#)->((!#)->(((!#)->(!#))->(!#))))->((((*->#)->#)->(((!#)->(((!#)->(!#))->(!#)))->((!#)->(!#))))->(((*->#)->#)->((!#)->(!#)))))
((((*->#)->#)->(((!#)->(((!#)->(!#))->(!#)))->((!#)->(!#))))->(((*->#)->#)->((!#)->(!#))))
(((*->#)->#)->((!#)->(!#)))
((((!#)->(!#))->(((!#)->((!#)->((*->#)->(!#))))->((!#)->((*->#)->(!#)))))->(((*->#)->#)->(((!#)->(!#))->(((!#)->((!#)->((*->#)->(!#))))->((!#)->((*->#)->(!#)))))))
(((!#)->(!#))->(((!#)->((!#)->((*->#)->(!#))))->((!#)->((*->#)->(!#)))))
(((*->#)->#)->(((!#)->(!#))->(((!#)->((!#)->((*->#)->(!#))))->((!#)->((*->#)->(!#))))))
((((*->#)->#)->((!#)->(!#)))->((((*->#)->#)->(((!#)->(!#))->(((!#)->((!#)->((*->#)->(!#))))->((!#)->((*->#)->(!#))))))->(((*->#)->#)->(((!#)->((!#)->((*->#)->(!#))))->((!#)->((*->#)->(!#)))))))
((((*->#)->#)->(((!#)->(!#))->(((!#)->((!#)->((*->#)->(!#))))->((!#)->((*->#)->(!#))))))->(((*->#)->#)->(((!#)->((!#)->((*->#)->(!#))))->((!#)->((*->#)->(!#))))))
(((*->#)->#)->(((!#)->((!#)->((*->#)->(!#))))->((!#)->((*->#)->(!#)))))
(((!#)->((*->#)->(!#)))->(((*->#)->#)->((!#)->((*->#)->(!#)))))
((!#)->((*->#)->(!#)))
(((*->#)->#)->((!#)->((*->#)->(!#))))
((((*->#)->#)->((!#)->((*->#)->#)))->(((*->#)->#)->(((*->#)->#)->((!#)->((*->#)->#)))))
(((*->#)->#)->((!#)->((*->#)->#)))
(((*->#)->#)->(((*->#)->#)->((!#)->((*->#)->#))))
(((*->#)->#)->((((*->#)->#)->((*->#)->#))->((*->#)->#)))
(((*->#)->#)->(((*->#)->#)->((*->#)->#)))
((((*->#)->#)->(((*->#)->#)->((*->#)->#)))->((((*->#)->#)->((((*->#)->#)->((*->#)->#))->((*->#)->#)))->(((*->#)->#)->((*->#)->#))))
((((*->#)->#)->((((*->#)->#)->((*->#)->#))->((*->#)->#)))->(((*->#)->#)->((*->#)->#)))
(((*->#)->#)->((*->#)->#))
((((*->#)->#)->((*->#)->#))->((((*->#)->#)->(((*->#)->#)->((!#)->((*->#)->#))))->(((*->#)->#)->((!#)->((*->#)->#)))))
((((*->#)->#)->(((*->#)->#)->((!#)->((*->#)->#))))->(((*->#)->#)->((!#)->((*->#)->#))))
(((*->#)->#)->((!#)->((*->#)->#)))
(((((*->#)->#)->(((*->#)->(!#))->(!(*->#))))->((!#)->(((*->#)->#)->(((*->#)->(!#))->(!(*->#))))))->(((*->#)->#)->((((*->#)->#)->(((*->#)->(!#))->(!(*->#))))->((!#)->(((*->#)->#)->(((*->#)->(!#))->(!(*->#))))))))
((((*->#)->#)->(((*->#)->(!#))->(!(*->#))))->((!#)->(((*->#)->#)->(((*->#)->(!#))->(!(*->#))))))
(((*->#)->#)->((((*->#)->#)->(((*->#)->(!#))->(!(*->#))))->((!#)->(((*->#)->#)->(((*->#)->(!#))->(!(*->#)))))))
((((*->#)->#)->(((*->#)->(!#))->(!(*->#))))->(((*->#)->#)->(((*->#)->#)->(((*->#)->(!#))->(!(*->#))))))
(((*->#)->#)->(((*->#)->(!#))->(!(*->#))))
(((*->#)->#)->(((*->#)->#)->(((*->#)->(!#))->(!(*->#)))))
((((*->#)->#)->(((*->#)->#)->(((*->#)->(!#))->(!(*->#)))))->((((*->#)->#)->((((*->#)->#)->(((*->#)->(!#))->(!(*->#))))->((!#)->(((*->#)->#)->(((*->#)->(!#))->(!(*->#)))))))->(((*->#)->#)->((!#)->(((*->#)->#)->(((*->#)->(!#))->(!(*->#))))))))
((((*->#)->#)->((((*->#)->#)->(((*->#)->(!#))->(!(*->#))))->((!#)->(((*->#)->#)->(((*->#)->(!#))->(!(*->#)))))))->(((*->#)->#)->((!#)->(((*->#)->#)->(((*->#)->(!#))->(!(*->#)))))))
(((*->#)->#)->((!#)->(((*->#)->#)->(((*->#)->(!#))->(!(*->#))))))
((((!#)->((*->#)->#))->(((!#)->(((*->#)->#)->(((*->#)->(!#))->(!(*->#)))))->((!#)->(((*->#)->(!#))->(!(*->#))))))->(((*->#)->#)->(((!#)->((*->#)->#))->(((!#)->(((*->#)->#)->(((*->#)->(!#))->(!(*->#)))))->((!#)->(((*->#)->(!#))->(!(*->#))))))))
(((!#)->((*->#)->#))->(((!#)->(((*->#)->#)->(((*->#)->(!#))->(!(*->#)))))->((!#)->(((*->#)->(!#))->(!(*->#))))))
(((*->#)->#)->(((!#)->((*->#)->#))->(((!#)->(((*->#)->#)->(((*->#)->(!#))->(!(*->#)))))->((!#)->(((*->#)->(!#))->(!(*->#)))))))
((((*->#)->#)->((!#)->((*->#)->#)))->((((*->#)->#)->(((!#)->((*->#)->#))->(((!#)->(((*->#)->#)->(((*->#)->(!#))->(!(*->#)))))->((!#)->(((*->#)->(!#))->(!(*->#)))))))->(((*->#)->#)->(((!#)->(((*->#)->#)->(((*->#)->(!#))->(!(*->#)))))->((!#)->(((*->#)->(!#))->(!(*->#))))))))
((((*->#)->#)->(((!#)->((*->#)->#))->(((!#)->(((*->#)->#)->(((*->#)->(!#))->(!(*->#)))))->((!#)->(((*->#)->(!#))->(!(*->#)))))))->(((*->#)->#)->(((!#)->(((*->#)->#)->(((*->#)->(!#))->(!(*->#)))))->((!#)->(((*->#)->(!#))->(!(*->#)))))))
(((*->#)->#)->(((!#)->(((*->#)->#)->(((*->#)->(!#))->(!(*->#)))))->((!#)->(((*->#)->(!#))->(!(*->#))))))
((((*->#)->#)->((!#)->(((*->#)->#)->(((*->#)->(!#))->(!(*->#))))))->((((*->#)->#)->(((!#)->(((*->#)->#)->(((*->#)->(!#))->(!(*->#)))))->((!#)->(((*->#)->(!#))->(!(*->#))))))->(((*->#)->#)->((!#)->(((*->#)->(!#))->(!(*->#)))))))
((((*->#)->#)->(((!#)->(((*->#)->#)->(((*->#)->(!#))->(!(*->#)))))->((!#)->(((*->#)->(!#))->(!(*->#))))))->(((*->#)->#)->((!#)->(((*->#)->(!#))->(!(*->#))))))
(((*->#)->#)->((!#)->(((*->#)->(!#))->(!(*->#)))))
((((!#)->((*->#)->(!#)))->(((!#)->(((*->#)->(!#))->(!(*->#))))->((!#)->(!(*->#)))))->(((*->#)->#)->(((!#)->((*->#)->(!#)))->(((!#)->(((*->#)->(!#))->(!(*->#))))->((!#)->(!(*->#)))))))
(((!#)->((*->#)->(!#)))->(((!#)->(((*->#)->(!#))->(!(*->#))))->((!#)->(!(*->#)))))
(((*->#)->#)->(((!#)->((*->#)->(!#)))->(((!#)->(((*->#)->(!#))->(!(*->#))))->((!#)->(!(*->#))))))
((((*->#)->#)->((!#)->((*->#)->(!#))))->((((*->#)->#)->(((!#)->((*->#)->(!#)))->(((!#)->(((*->#)->(!#))->(!(*->#))))->((!#)->(!(*->#))))))->(((*->#)->#)->(((!#)->(((*->#)->(!#))->(!(*->#))))->((!#)->(!(*->#)))))))
((((*->#)->#)->(((!#)->((*->#)->(!#)))->(((!#)->(((*->#)->(!#))->(!(*->#))))->((!#)->(!(*->#))))))->(((*->#)->#)->(((!#)->(((*->#)->(!#))->(!(*->#))))->((!#)->(!(*->#))))))
(((*->#)->#)->(((!#)->(((*->#)->(!#))->(!(*->#))))->((!#)->(!(*->#)))))
((((*->#)->#)->((!#)->(((*->#)->(!#))->(!(*->#)))))->((((*->#)->#)->(((!#)->(((*->#)->(!#))->(!(*->#))))->((!#)->(!(*->#)))))->(((*->#)->#)->((!#)->(!(*->#))))))
((((*->#)->#)->(((!#)->(((*->#)->(!#))->(!(*->#))))->((!#)->(!(*->#)))))->(((*->#)->#)->((!#)->(!(*->#)))))
(((*->#)->#)->((!#)->(!(*->#))))
((!#)->(!(*->#)))
(!#)
(!(*->#))";;

let a_b_or = "(*->(*|#))
*
(*|#)";;

let a_notB_or = "(*->(*|#))
*
(*|#)";;

let notA_B_or = "(#->(*|#))
#
(*|#)";;

let a_b_and = "*
#
*->#->(*&#)
#->(*&#)
(*&#)";;

let a_b_impl = "#->(*->#)
#
*->#";;

let notA_B_impl = "#->(*->#)
#
(*->#)";;

let notA_notB_impl = "(!*)
(!#)
((*->((!#)->*))->(*->(*->((!#)->*))))
(*->((!#)->*))
(*->(*->((!#)->*)))
(*->((*->*)->*))
(*->(*->*))
((*->(*->*))->((*->((*->*)->*))->(*->*)))
((*->((*->*)->*))->(*->*))
(*->*)
((*->*)->((*->(*->((!#)->*)))->(*->((!#)->*))))
((*->(*->((!#)->*)))->(*->((!#)->*)))
(*->((!#)->*))
(((!*)->((!#)->(!*)))->(*->((!*)->((!#)->(!*)))))
((!*)->((!#)->(!*)))
(*->((!*)->((!#)->(!*))))
((!*)->(*->(!*)))
(!*)
(*->(!*))
((*->(!*))->((*->((!*)->((!#)->(!*))))->(*->((!#)->(!*)))))
((*->((!*)->((!#)->(!*))))->(*->((!#)->(!*))))
(*->((!#)->(!*)))
((((!#)->*)->(((!#)->(!*))->(!(!#))))->(*->(((!#)->*)->(((!#)->(!*))->(!(!#))))))
(((!#)->*)->(((!#)->(!*))->(!(!#))))
(*->(((!#)->*)->(((!#)->(!*))->(!(!#)))))
((*->((!#)->*))->((*->(((!#)->*)->(((!#)->(!*))->(!(!#)))))->(*->(((!#)->(!*))->(!(!#))))))
((*->(((!#)->*)->(((!#)->(!*))->(!(!#)))))->(*->(((!#)->(!*))->(!(!#)))))
(*->(((!#)->(!*))->(!(!#))))
((*->((!#)->(!*)))->((*->(((!#)->(!*))->(!(!#))))->(*->(!(!#)))))
((*->(((!#)->(!*))->(!(!#))))->(*->(!(!#))))
(*->(!(!#)))
(((!(!#))->#)->(*->((!(!#))->#)))
((!(!#))->#)
(*->((!(!#))->#))
((*->(!(!#)))->((*->((!(!#))->#))->(*->#)))
((*->((!(!#))->#))->(*->#))
(*->#)";;

let a_notNotA = "*
((!*)->(((!*)->(!*))->(!*)))
((!*)->((!*)->(!*)))
(((!*)->((!*)->(!*)))->(((!*)->(((!*)->(!*))->(!*)))->((!*)->(!*))))
(((!*)->(((!*)->(!*))->(!*)))->((!*)->(!*)))
((!*)->(!*))
(*->((!*)->*))
((!*)->*)
(((!*)->*)->(((!*)->(!*))->(!(!*))))
(((!*)->(!*))->(!(!*)))
(!(!*))";;

let contraposition = "(*->#)->(*->!#)->!*
((*->#)->(*->!#)->!*)->(*->#)->(*->#)->(*->!#)->!*
(*->#)->(*->#)->(*->!#)->!*
((*->#)->(*->!#)->!*)->!#->(*->#)->(*->!#)->!*
(((*->#)->(*->!#)->!*)->!#->(*->#)->(*->!#)->!*)->(*->#)->((*->#)->(*->!#)->!*)->!#->(*->#)->(*->!#)->!*
(*->#)->((*->#)->(*->!#)->!*)->!#->(*->#)->(*->!#)->!*
((*->#)->(*->#)->(*->!#)->!*)->((*->#)->((*->#)->(*->!#)->!*)->!#->(*->#)->(*->!#)->!*)->(*->#)->!#->(*->#)->(*->!#)->!*
((*->#)->((*->#)->(*->!#)->!*)->!#->(*->#)->(*->!#)->!*)->(*->#)->!#->(*->#)->(*->!#)->!*
(*->#)->!#->(*->#)->(*->!#)->!*
(*->#)->(*->#)->*->#
(*->#)->((*->#)->*->#)->*->#
((*->#)->(*->#)->*->#)->((*->#)->((*->#)->*->#)->*->#)->(*->#)->*->#
((*->#)->((*->#)->*->#)->*->#)->(*->#)->*->#
(*->#)->*->#
(*->#)->!#->*->#
((*->#)->!#->*->#)->(*->#)->(*->#)->!#->*->#
(*->#)->(*->#)->!#->*->#
((*->#)->*->#)->((*->#)->(*->#)->!#->*->#)->(*->#)->!#->*->#
((*->#)->(*->#)->!#->*->#)->(*->#)->!#->*->#
(*->#)->!#->*->#
(!#->*->#)->(!#->(*->#)->(*->!#)->!*)->!#->(*->!#)->!*
((!#->*->#)->(!#->(*->#)->(*->!#)->!*)->!#->(*->!#)->!*)->(*->#)->(!#->*->#)->(!#->(*->#)->(*->!#)->!*)->!#->(*->!#)->!*
(*->#)->(!#->*->#)->(!#->(*->#)->(*->!#)->!*)->!#->(*->!#)->!*
((*->#)->!#->*->#)->((*->#)->(!#->*->#)->(!#->(*->#)->(*->!#)->!*)->!#->(*->!#)->!*)->(*->#)->(!#->(*->#)->(*->!#)->!*)->!#->(*->!#)->!*
((*->#)->(!#->*->#)->(!#->(*->#)->(*->!#)->!*)->!#->(*->!#)->!*)->(*->#)->(!#->(*->#)->(*->!#)->!*)->!#->(*->!#)->!*
(*->#)->(!#->(*->#)->(*->!#)->!*)->!#->(*->!#)->!*
((*->#)->!#->(*->#)->(*->!#)->!*)->((*->#)->(!#->(*->#)->(*->!#)->!*)->!#->(*->!#)->!*)->(*->#)->!#->(*->!#)->!*
((*->#)->(!#->(*->#)->(*->!#)->!*)->!#->(*->!#)->!*)->(*->#)->!#->(*->!#)->!*
(*->#)->!#->(*->!#)->!*
!#->*->!#
(!#->*->!#)->(*->#)->!#->*->!#
(*->#)->!#->*->!#
(!#->*->!#)->!#->!#->*->!#
((!#->*->!#)->!#->!#->*->!#)->(*->#)->(!#->*->!#)->!#->!#->*->!#
(*->#)->(!#->*->!#)->!#->!#->*->!#
((*->#)->!#->*->!#)->((*->#)->(!#->*->!#)->!#->!#->*->!#)->(*->#)->!#->!#->*->!#
((*->#)->(!#->*->!#)->!#->!#->*->!#)->(*->#)->!#->!#->*->!#
(*->#)->!#->!#->*->!#
!#->!#->!#
(!#->!#->!#)->(*->#)->!#->!#->!#
(*->#)->!#->!#->!#
(!#->!#->!#)->(!#->(!#->!#)->!#)->!#->!#
((!#->!#->!#)->(!#->(!#->!#)->!#)->!#->!#)->(*->#)->(!#->!#->!#)->(!#->(!#->!#)->!#)->!#->!#
(*->#)->(!#->!#->!#)->(!#->(!#->!#)->!#)->!#->!#
((*->#)->!#->!#->!#)->((*->#)->(!#->!#->!#)->(!#->(!#->!#)->!#)->!#->!#)->(*->#)->(!#->(!#->!#)->!#)->!#->!#
((*->#)->(!#->!#->!#)->(!#->(!#->!#)->!#)->!#->!#)->(*->#)->(!#->(!#->!#)->!#)->!#->!#
(*->#)->(!#->(!#->!#)->!#)->!#->!#
!#->(!#->!#)->!#
(!#->(!#->!#)->!#)->(*->#)->!#->(!#->!#)->!#
(*->#)->!#->(!#->!#)->!#
((*->#)->!#->(!#->!#)->!#)->((*->#)->(!#->(!#->!#)->!#)->!#->!#)->(*->#)->!#->!#
((*->#)->(!#->(!#->!#)->!#)->!#->!#)->(*->#)->!#->!#
(*->#)->!#->!#
(!#->!#)->(!#->!#->*->!#)->!#->*->!#
((!#->!#)->(!#->!#->*->!#)->!#->*->!#)->(*->#)->(!#->!#)->(!#->!#->*->!#)->!#->*->!#
(*->#)->(!#->!#)->(!#->!#->*->!#)->!#->*->!#
((*->#)->!#->!#)->((*->#)->(!#->!#)->(!#->!#->*->!#)->!#->*->!#)->(*->#)->(!#->!#->*->!#)->!#->*->!#
((*->#)->(!#->!#)->(!#->!#->*->!#)->!#->*->!#)->(*->#)->(!#->!#->*->!#)->!#->*->!#
(*->#)->(!#->!#->*->!#)->!#->*->!#
!#->*->!#
(!#->*->!#)->(*->#)->!#->*->!#
(*->#)->!#->*->!#
(!#->*->!#)->(!#->(*->!#)->!*)->!#->!*
((!#->*->!#)->(!#->(*->!#)->!*)->!#->!*)->(*->#)->(!#->*->!#)->(!#->(*->!#)->!*)->!#->!*
(*->#)->(!#->*->!#)->(!#->(*->!#)->!*)->!#->!*
((*->#)->!#->*->!#)->((*->#)->(!#->*->!#)->(!#->(*->!#)->!*)->!#->!*)->(*->#)->(!#->(*->!#)->!*)->!#->!*
((*->#)->(!#->*->!#)->(!#->(*->!#)->!*)->!#->!*)->(*->#)->(!#->(*->!#)->!*)->!#->!*
(*->#)->(!#->(*->!#)->!*)->!#->!*
((*->#)->!#->(*->!#)->!*)->((*->#)->(!#->(*->!#)->!*)->!#->!*)->(*->#)->!#->!*
((*->#)->(!#->(*->!#)->!*)->!#->!*)->(*->#)->!#->!*
(*->#)->!#->!*";;

let excludedThird = "(!(*|!*)->!*)->(!(*|!*)->!!*)->(!!(*|!*))
(!(*|!*)->!!*)->(!!(*|!*))
(!!(*|!*))
(!!(*|!*))->(*|!*)
*|!*";;

let exclusion = "(*->#)->(!*->#)->(*|!*)->#
(!*->#)->(*|!*)->#
(*|!*)->#
#";;

let contraposition = "(*->#)->(*->!#)->!*
((*->#)->(*->!#)->!*)->(*->#)->(*->#)->(*->!#)->!*
(*->#)->(*->#)->(*->!#)->!*
((*->#)->(*->!#)->!*)->!#->(*->#)->(*->!#)->!*
(((*->#)->(*->!#)->!*)->!#->(*->#)->(*->!#)->!*)->(*->#)->((*->#)->(*->!#)->!*)->!#->(*->#)->(*->!#)->!*
(*->#)->((*->#)->(*->!#)->!*)->!#->(*->#)->(*->!#)->!*
((*->#)->(*->#)->(*->!#)->!*)->((*->#)->((*->#)->(*->!#)->!*)->!#->(*->#)->(*->!#)->!*)->(*->#)->!#->(*->#)->(*->!#)->!*
((*->#)->((*->#)->(*->!#)->!*)->!#->(*->#)->(*->!#)->!*)->(*->#)->!#->(*->#)->(*->!#)->!*
(*->#)->!#->(*->#)->(*->!#)->!*
(*->#)->(*->#)->*->#
(*->#)->((*->#)->*->#)->*->#
((*->#)->(*->#)->*->#)->((*->#)->((*->#)->*->#)->*->#)->(*->#)->*->#
((*->#)->((*->#)->*->#)->*->#)->(*->#)->*->#
(*->#)->*->#
(*->#)->!#->*->#
((*->#)->!#->*->#)->(*->#)->(*->#)->!#->*->#
(*->#)->(*->#)->!#->*->#
((*->#)->*->#)->((*->#)->(*->#)->!#->*->#)->(*->#)->!#->*->#
((*->#)->(*->#)->!#->*->#)->(*->#)->!#->*->#
(*->#)->!#->*->#
(!#->*->#)->(!#->(*->#)->(*->!#)->!*)->!#->(*->!#)->!*
((!#->*->#)->(!#->(*->#)->(*->!#)->!*)->!#->(*->!#)->!*)->(*->#)->(!#->*->#)->(!#->(*->#)->(*->!#)->!*)->!#->(*->!#)->!*
(*->#)->(!#->*->#)->(!#->(*->#)->(*->!#)->!*)->!#->(*->!#)->!*
((*->#)->!#->*->#)->((*->#)->(!#->*->#)->(!#->(*->#)->(*->!#)->!*)->!#->(*->!#)->!*)->(*->#)->(!#->(*->#)->(*->!#)->!*)->!#->(*->!#)->!*
((*->#)->(!#->*->#)->(!#->(*->#)->(*->!#)->!*)->!#->(*->!#)->!*)->(*->#)->(!#->(*->#)->(*->!#)->!*)->!#->(*->!#)->!*
(*->#)->(!#->(*->#)->(*->!#)->!*)->!#->(*->!#)->!*
((*->#)->!#->(*->#)->(*->!#)->!*)->((*->#)->(!#->(*->#)->(*->!#)->!*)->!#->(*->!#)->!*)->(*->#)->!#->(*->!#)->!*
((*->#)->(!#->(*->#)->(*->!#)->!*)->!#->(*->!#)->!*)->(*->#)->!#->(*->!#)->!*
(*->#)->!#->(*->!#)->!*
!#->*->!#
(!#->*->!#)->(*->#)->!#->*->!#
(*->#)->!#->*->!#
(!#->*->!#)->!#->!#->*->!#
((!#->*->!#)->!#->!#->*->!#)->(*->#)->(!#->*->!#)->!#->!#->*->!#
(*->#)->(!#->*->!#)->!#->!#->*->!#
((*->#)->!#->*->!#)->((*->#)->(!#->*->!#)->!#->!#->*->!#)->(*->#)->!#->!#->*->!#
((*->#)->(!#->*->!#)->!#->!#->*->!#)->(*->#)->!#->!#->*->!#
(*->#)->!#->!#->*->!#
!#->!#->!#
(!#->!#->!#)->(*->#)->!#->!#->!#
(*->#)->!#->!#->!#
(!#->!#->!#)->(!#->(!#->!#)->!#)->!#->!#
((!#->!#->!#)->(!#->(!#->!#)->!#)->!#->!#)->(*->#)->(!#->!#->!#)->(!#->(!#->!#)->!#)->!#->!#
(*->#)->(!#->!#->!#)->(!#->(!#->!#)->!#)->!#->!#
((*->#)->!#->!#->!#)->((*->#)->(!#->!#->!#)->(!#->(!#->!#)->!#)->!#->!#)->(*->#)->(!#->(!#->!#)->!#)->!#->!#
((*->#)->(!#->!#->!#)->(!#->(!#->!#)->!#)->!#->!#)->(*->#)->(!#->(!#->!#)->!#)->!#->!#
(*->#)->(!#->(!#->!#)->!#)->!#->!#
!#->(!#->!#)->!#
(!#->(!#->!#)->!#)->(*->#)->!#->(!#->!#)->!#
(*->#)->!#->(!#->!#)->!#
((*->#)->!#->(!#->!#)->!#)->((*->#)->(!#->(!#->!#)->!#)->!#->!#)->(*->#)->!#->!#
((*->#)->(!#->(!#->!#)->!#)->!#->!#)->(*->#)->!#->!#
(*->#)->!#->!#
(!#->!#)->(!#->!#->*->!#)->!#->*->!#
((!#->!#)->(!#->!#->*->!#)->!#->*->!#)->(*->#)->(!#->!#)->(!#->!#->*->!#)->!#->*->!#
(*->#)->(!#->!#)->(!#->!#->*->!#)->!#->*->!#
((*->#)->!#->!#)->((*->#)->(!#->!#)->(!#->!#->*->!#)->!#->*->!#)->(*->#)->(!#->!#->*->!#)->!#->*->!#
((*->#)->(!#->!#)->(!#->!#->*->!#)->!#->*->!#)->(*->#)->(!#->!#->*->!#)->!#->*->!#
(*->#)->(!#->!#->*->!#)->!#->*->!#
!#->*->!#
(!#->*->!#)->(*->#)->!#->*->!#
(*->#)->!#->*->!#
(!#->*->!#)->(!#->(*->!#)->!*)->!#->!*
((!#->*->!#)->(!#->(*->!#)->!*)->!#->!*)->(*->#)->(!#->*->!#)->(!#->(*->!#)->!*)->!#->!*
(*->#)->(!#->*->!#)->(!#->(*->!#)->!*)->!#->!*
((*->#)->!#->*->!#)->((*->#)->(!#->*->!#)->(!#->(*->!#)->!*)->!#->!*)->(*->#)->(!#->(*->!#)->!*)->!#->!*
((*->#)->(!#->*->!#)->(!#->(*->!#)->!*)->!#->!*)->(*->#)->(!#->(*->!#)->!*)->!#->!*
(*->#)->(!#->(*->!#)->!*)->!#->!*
((*->#)->!#->(*->!#)->!*)->((*->#)->(!#->(*->!#)->!*)->!#->!*)->(*->#)->!#->!*
((*->#)->(!#->(*->!#)->!*)->!#->!*)->(*->#)->!#->!*
(*->#)->!#->!*";;

let getContraposition a b = replaceABinS (string_of_tree a) (string_of_tree b) contraposition;;

let getProofExclusion a b = replaceABinS (string_of_tree a) (string_of_tree b) exclusion;;

let getProofExcluded a = replaceABinS (string_of_tree a) "" excludedThird;;

let getProofSingle alphaG expr =
  match expr with
  | Neg(Neg a) when (alphaG = a) -> replaceABinS (string_of_tree a) "" a_notNotA

  | _ -> "Something went wrong :("
;;

let getProof alphaG betaG expr =
  match expr with
  | Neg(Binop(Disj, a, b)) when
    ((Neg a) = alphaG && (Neg b) = betaG) -> replaceABinS (string_of_tree a) (string_of_tree b) notA_notB_notOr
  | Neg(Binop(Disj, b, a)) when
    ((Neg a) = alphaG && (Neg b) = betaG) -> replaceABinS (string_of_tree b) (string_of_tree a) notA_notB_notOr

  | Neg(Binop(Conj, a, b)) when
    ((Neg a) = alphaG && (Neg b) = betaG) -> replaceABinS (string_of_tree a) (string_of_tree b) notA_notB_notAnd
  | Neg(Binop(Conj, b, a)) when
    ((Neg a) = alphaG && (Neg b) = betaG) -> replaceABinS (string_of_tree b) (string_of_tree a) notA_notB_notAnd

  | Neg(Binop(Conj, a, b)) when
    ((Neg a) = alphaG && b = betaG) -> replaceABinS (string_of_tree a) (string_of_tree b) notA_B_notAnd
  | Neg(Binop(Conj, a, b)) when
    ((Neg a) = betaG && b = alphaG) -> replaceABinS (string_of_tree a) (string_of_tree b) notA_B_notAnd

  | Neg(Binop(Conj, a, b)) when
    (a = alphaG && (Neg b) = betaG) -> replaceABinS (string_of_tree a) (string_of_tree b) a_notB_notAnd
  | Neg(Binop(Conj, b, a)) when
    (a = betaG && (Neg b) = alphaG) -> replaceABinS (string_of_tree a) (string_of_tree b) a_notB_notAnd

  | Neg(Binop(Impl, a, b)) when
    (a = alphaG && (Neg b) = betaG) -> replaceABinS (string_of_tree a) (string_of_tree b) a_notB_notImpl
  | Neg(Binop(Impl, a, b)) when
    (a = betaG && (Neg b) = alphaG) -> replaceABinS (string_of_tree a) (string_of_tree b) a_notB_notImpl

  | Binop(Disj, a, b) when
    (a = alphaG && b = betaG) -> replaceABinS (string_of_tree a) (string_of_tree b) a_b_or
  | Binop(Disj, a, b) when
    (a = betaG && a = alphaG) -> replaceABinS (string_of_tree a) (string_of_tree b) a_b_or

  | Binop(Disj, a, b) when
    (a = alphaG && (Neg b) = betaG) -> replaceABinS (string_of_tree a) (string_of_tree b) a_notB_or
  | Binop(Disj, a, b) when
    (a = betaG && (Neg b) = alphaG) -> replaceABinS (string_of_tree a) (string_of_tree b) a_notB_or

  | Binop(Disj, a, b) when
    ((Neg a) = alphaG && b = betaG) -> replaceABinS (string_of_tree a) (string_of_tree b) notA_B_or
  | Binop(Disj, a, b) when
    ((Neg a) = betaG && b = alphaG) -> replaceABinS (string_of_tree a) (string_of_tree b) notA_B_or

  | Binop(Conj, a, b) when
    (a = alphaG && b = betaG) -> replaceABinS (string_of_tree a) (string_of_tree b) a_b_and
  | Binop(Conj, a, b) when
    (a = betaG && b = alphaG) -> replaceABinS (string_of_tree a) (string_of_tree b) a_b_and

  | Binop(Impl, a, b) when
    (a = alphaG && b = betaG) -> replaceABinS (string_of_tree a) (string_of_tree b) a_b_impl
  | Binop(Impl, a, b) when
    (a = betaG && a = alphaG) -> replaceABinS (string_of_tree a) (string_of_tree b) a_b_impl

  | Binop(Impl, a, b) when
    ((Neg a) = alphaG && b = betaG) -> replaceABinS (string_of_tree a) (string_of_tree b) notA_B_impl
  | Binop(Impl, a, b) when
    ((Neg a) = betaG && b = alphaG) -> replaceABinS (string_of_tree a) (string_of_tree b) notA_B_impl

  | Binop(Impl, a, b) when
    ((Neg a) = alphaG && (Neg b) = betaG) -> replaceABinS (string_of_tree a) (string_of_tree b) notA_notB_impl
  | Binop(Impl, a, b) when
    ((Neg a) = betaG && (Neg b) = alphaG) -> replaceABinS (string_of_tree a) (string_of_tree b) notA_notB_impl

  | _ -> "Something went wrong :("
;;
